import java.util.Scanner;

public class Knapsack {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int i, j, n, c;
        int w[] = new int[10];
        int p[] = new int[10];
        int v[][] = new int[10][10];

        System.out.println("Enter No. of Objects");
        n = sc.nextInt();

        System.out.println("Enter Knapsack Capacity");
        c = sc.nextInt();

        System.out.println("Enter Weights");
        for (i = 1; i <= n; i++) {
            w[i] = sc.nextInt();
        }

        System.out.println("Enter Profits");
        for (i = 1; i <= n; i++) {
            p[i] = sc.nextInt();
        }

        for (i = 0; i <= n; i++) {
            for (j = 0; j <= c; j++) {
                if (i == 0 || j == 0)
                    v[i][j] = 0;
                else if (j < w[i])
                    v[i][j] = v[i - 1][j];
                else
                    v[i][j] = max(v[i - 1][j], v[i - 1][j - w[i]] + p[i]);
            }
        }

        System.out.println("\n\t0/1 Knapsack Problem\n\n");
        for (i = 0; i <= n; i++) {
            for (j = 0; j <= c; j++) {
                System.out.print("\t" + v[i][j]);
            }
            System.out.print("\n");
        }

        System.out.println("\n\tMaximum Profit = " + v[n][c]);
        System.out.print("\n\tItem Selected = ");
        j = c;
        for (i = n; i >= 1; i--) {
            if (v[i][j] != v[i - 1][j]) {
                System.out.print("\t" + i);
                j = j - w[i];
            }
        }
    }

    private static int max(int i, int j) {
        if (i > j)
            return i;
        else
            return j;
    }
}
.print("\t"+i);
                j = j-w[i];
            }
        }
     
    }     
    private static int max(inti,int j)
    {
        if (i > j)
            return i;
        else return j;
    }

}




Output 1:
Enter No. of Objects
4
Enter Knapsack Capacity
5
Enter Weights
2
1
3
2
Enter Profits
12
10
20
15

    0/1 Knapsack Problem

    0      0     0     0      0      0
    0      0    12   12    12    12
    0    10    12    22    22    22
    0    10    12    22    30    32
    0    10    15    25    30    37

    Maximum Profit = 37

    Item Selected =     4    2    1


ALGORITHMS:

Dynamic-0-1-knapsack (v, w, n, W)
for w = 0 to W do c[0, w] = 0
for i = 1 to n do c[i, 0] = 0
for w = 1 to W do if wi â‰¤ w then
if vi + c[i-1, w-wi] then
c[i, w] = vi + c[i-1, w-wi]
else c[i, w] = c[i-1, w] else
c[i, w] = c[i-1, w]

