import java.util.Scanner;

public class TSP {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int c[][] = new int[10][10];
        int tour[] = new int[10];
        int i, j, cost;

        System.out.print("Enter No. of Cities: ");
        int n = in.nextInt();

        if (n == 1) {
            System.out.println("Path is not possible");
            System.exit(0);
        }

        System.out.println("Enter the Cost Matrix");
        for (i = 1; i <= n; i++) {
            for (j = 1; j <= n; j++) {
                c[i][j] = in.nextInt();
            }
        }

        System.out.println("\n\n\tTravelling Salesperson Problem\n");

        System.out.println("\tThe Cost Matrix is\n");
        for (i = 1; i <= n; i++) {
            for (j = 1; j <= n; j++) {
                System.out.print("\t" + c[i][j]);
            }
            System.out.println();
        }

        for (i = 1; i <= n; i++) {
            tour[i] = i;
        }
        cost = tspdp(c, tour, 1, n);
        System.out.print("\n\n\tThe Optimal Tour is = ");
        for (i = 1; i <= n; i++) {
            System.out.print(tour[i] + "->");
        }
        System.out.println("1");
        System.out.print("\n\n\tMinimum Cost = " + cost);
    }

    static int tspdp(int c[][], int tour[], int start, int n) {
        int mintour[] = new int[10];
        int temp[] = new int[10];
        int mincost = 999;
        int ccost, i, j, k;

        if (start == n - 1) {
            return (c[tour[n - 1]][tour[n]] + c[tour[n]][1]);
        }

        for (i = start + 1; i <= n; i++) {
            for (j = 1; j <= n; j++) {
                temp[j] = tour[j];
            }

            temp[start + 1] = tour[i];
            temp[i] = tour[start + 1];

            if ((c[tour[start]][tour[i]] + (ccost = tspdp(c, temp, start + 1, n))) < mincost) {

                mincost = c[tour[start]][tour[i]] + ccost;

                for (k = 1; k <= n; k++) {
                    mintour[k] = temp[k];
                }
            }
        }

        for (i = 1; i <= n; i++) {
            tour[i] = mintour[i];
        }
        return mincost;
    }
}



Enter No. of Cities: 4 Enter the Cost Matrix 0 30 6 4
30 0 5 10
6 5 0 20
4 10 20 0
Travelling Salesperson Problem The Cost Matrix is
0	30	6	4
30	0	5	10
6	5	0	20
4	10	20	0


The Optimal Tour is = 1->3->2->4->1 Minimum Cost = 25
