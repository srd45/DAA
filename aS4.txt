import java.util.Scanner;

public class gknapsack 
{
    public static void main(String[] args) 
    {
    
        Scanner sc = new Scanner(System.in);
        inti,j,m,n;
        float temp;
        float p[] = new float[10];
        float w[] = new float[10];
        float c[] = new float[10];
        
        System.out.print("Enter No. of Objects: ");
        n = sc.nextInt();
        
        System.out.println("Enter Weights:");
        for(i=1;i<=n;i++)
           w[i] = sc.nextFloat();
        
        System.out.println("Enter Profits: ");
        for(i=1;i<=n;i++)
            p[i] = sc.nextFloat();
        
        System.out.println("Enter Knapsack Size");
        m = sc.nextInt();
        
        for(i=1;i<=n;i++)
            c[i] = p[i]/w[i];
        
        for(i=1;i<=n;i++)       //arranging the items in non increasing order of pi/wi
        {
            for(j=1;j<=n-i;j++)
            {
                
                if(c[j] < c[j+1])
                {
                    temp = c[j];
                    c[j] = c[j+1];
                    c[j+1]= temp;
                    
                    temp = w[j];
                    w[j] = w[j+1];
                    w[j+1] = temp;
temp = p[j];
                    p[j] = p[j+1];
                    p[j+1] = temp;
                }
                
            }
        }
    
        System.out.println("\n\tThe Items are arranged as \n");
        System.out.print("\n\tItems\tWeights\tProfits\tProfit/Weight\n\n");
        for(i=1;i<=n;i++)
        {
            System.out.println("\t"+i+"\t"+w[i]+"\t"+p[i]+"\t"+c[i]);
        }
        
        float x[] = new float[10];
        float U, profit = 0;
        U = m;     //assign the knapsack capacity
        for(i=1;i<=n;i++)
            x[i]=0;
        for(i=1;i<=n;i++)
        {
            if(w[i] > U) break;  // if weight of 1st item is greater than knapsack capacity, then break
            x[i]=1;                   // else select the item 
            U= U-w[i];           // calculating the remaining capacity of knapsack
        }
        if(i<n)
            x[i] = U/w[i];
        System.out.println("\n\t The Solution Vector is : ");
        for(i=1;i<=n;i++)
          System.out.println("\n\t\tx["+i+"] = "+x[i]);
        
        for(i=1;i<=n;i++)
            profit = profit + (p[i] * x[i]);
        System.out.println("\n\t Maximum Profit = "+profit);
    }

}






Algorithm

1.    Greedy factorial Knapsack(P[1..n], w[1..n], x[1..n], m)
2.  For j <= 1 to n do
    x[j] <- 0
3.  Profit <- 0
    Weight <- 0
4.  j <- 1
    while (weight < m)
	if(weight + w[j] =<m)
		x[j] = 1
	weight weight+ w[j]
	else
	   x[j] = (M-weight)/w[j]
	   weight = m
5.  profit = profit + p[j]*x[j]
    j++
6.  End
 






Output 1:

Enter No. of Objects: 3
Enter Weights:
18
15
10
Enter Profits: 
25
24
15
Enter Knapsack Size
20

    The Items are arranged as 


    Items    Weights    Profits    Profit/Weight

    1            15.0          24.0       1.6
    2            10.0          15.0       1.5
    3            18.0          25.0       1.3888888

     The Solution Vector is : 

        x[1] = 1.0

        x[2] = 0.5

        x[3] = 0.0

     Maximum Profit = 31.5





