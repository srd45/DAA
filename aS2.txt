import java.util.Random;
import java.util.Scanner;

public class lab4
{
    public static void main(String args[]) 
    {
        Scanner sc = new Scanner(System.in);
        Random r = new Random();
    
        System.out.print("Enter the size of an Array : ");
        int n = sc.nextInt();
        
        int array [] = new int[n];
        long start, end;
      
        for(int i=0; i<n; i++)
        {
              array[i]= r.nextInt(n);
        }
   
        System.out.println("Quick Sort\n\n");
        System.out.println("Values Before the sort:\n");
 
          for(int i=0; i<n; i++)
              System.out.println(array[i]);
 
        start=System.nanoTime();
      
          end=System.nanoTime();

        System.out.print("Values after the sort:\n");
      for(int i=0; i<n; i++)
         System.out.println(array[i]);
   
      System.out.println("\n\nThe time taken to sort is "+((end-start)/1000000)+"ms");
        double best = n*Math.log(n);
      double avg = best;
      double worst = n*n;
      System.out.print("\nBest Case = "+Math.round(best)+"\nAverage = "+Math.round(avg)+"\nWorst = "+Math.round(worst));
          
      }

    static void quicksort(int a[],int p, int q)
    {
        int j;
        if(p < q)
        {
            j=partition(a,p,q); 
            quicksort(a,p,j-1); 
            quicksort(a,j,q); 
        }
    }

    static int partition(int a[],int i, int j)
    {
        int v = a[i]; 
        
        while(i <= j)
        {
            while(a[i] < v)
                i++;
                while(a[j] > v)
                    j--;
            if(i <= j)
            {
                int temp = a[i];
                    a[i] = a[j];
                    a[j] = temp;
                    i++;
                    j--;
            }        
        }
        return i;
    }
}

Algorithm

1. Start
2. Quicksort(Array A, int m, int n)
3. if (n>m)
	then
	i<-a random.index from [m,n]
	swap A[i] with A[m]
	O<- partition (A,m,n)
	Quicksort(A,m,O-1)
	Quicksort(A,o+1,n)
4. partition (arr A, int m, int n)
   x<-A[m]
   O<-m
   for p<-m+1 to n
   do if (A[p]<x)
    then O<- O+1
   swap A[O] with A[p]
   swap A[m] with A[O]
   return 0
5. Stop







Output:
Sl no	N	Time taken	Best case 	Average case	Worst case
1	5500	6ms	47369	47369	30250000
2	6000	8ms	52197	52197	36000000
3	6500	8ms	57067	57067	42250000
4	7000	9ms	61967	61967	49000000
5	7500	9ms	66920	66920	56250000


